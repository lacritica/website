import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { colors, transitions } from 'decap-cms-ui-default';
import { jsx as ___EmotionJSX } from "@emotion/react";
const NoteCard = /*#__PURE__*/_styled("div", {
  target: "ee0v20j13",
  label: "NoteCard"
})("background-color:", props => props.resolved ? colors.inputBackground : 'white', ";border:1px solid ", props => props.resolved ? colors.textFieldBorder : colors.textFieldBorder, ";border-radius:4px;margin-bottom:8px;padding:12px;transition:all ", transitions.main, ";opacity:", props => props.resolved ? 0.7 : 1, ";&:hover{border-color:", colors.active, ";box-shadow:0 2px 4px rgba(0, 0, 0, 0.1);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoteHeader = /*#__PURE__*/_styled("div", {
  target: "ee0v20j12",
  label: "NoteHeader"
})(process.env.NODE_ENV === "production" ? {
  name: "rcj3va",
  styles: "display:flex;justify-content:space-between;align-items:center;margin-bottom:8px"
} : {
  name: "rcj3va",
  styles: "display:flex;justify-content:space-between;align-items:center;margin-bottom:8px/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvTm90ZUl0ZW0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUI2QiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9yTm90ZXNQYW5lL05vdGVJdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29sb3JzLCB0cmFuc2l0aW9ucyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgTm90ZUNhcmQgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IChwcm9wcy5yZXNvbHZlZCA/IGNvbG9ycy5pbnB1dEJhY2tncm91bmQgOiAnd2hpdGUnKX07XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7cHJvcHMgPT4gKHByb3BzLnJlc29sdmVkID8gY29sb3JzLnRleHRGaWVsZEJvcmRlciA6IGNvbG9ycy50ZXh0RmllbGRCb3JkZXIpfTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gIHBhZGRpbmc6IDEycHg7XG4gIHRyYW5zaXRpb246IGFsbCAke3RyYW5zaXRpb25zLm1haW59O1xuICBvcGFjaXR5OiAke3Byb3BzID0+IChwcm9wcy5yZXNvbHZlZCA/IDAuNyA6IDEpfTtcblxuICAmOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuYDtcblxuY29uc3QgTm90ZUhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuYDtcblxuY29uc3QgTm90ZUF1dGhvciA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3QgQXV0aG9yU2VjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgQXZhdGFyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDI0cHg7XG4gIGhlaWdodDogMjRweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbnB1dEJhY2tncm91bmR9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleC1zaHJpbms6IDA7XG5gO1xuXG5jb25zdCBBdmF0YXJJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xuYDtcblxuY29uc3QgQXZhdGFySW5pdGlhbHMgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxMHB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IE5vdGVUaW1lc3RhbXAgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxMXB4O1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbmA7XG5cbmNvbnN0IE5vdGVDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuYDtcblxuY29uc3QgTm90ZVRleHQgPSBzdHlsZWQucGBcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG5gO1xuXG5jb25zdCBFZGl0YWJsZVRleHQgPSBzdHlsZWQudGV4dGFyZWFgXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7Y29sb3JzLmFjdGl2ZX07XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgb3V0bGluZTogbm9uZTtcblxuICAmOmZvY3VzIHtcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYmEoNzAsIDE1MSwgMjE4LCAwLjEpO1xuICB9XG5gO1xuXG5jb25zdCBOb3RlQWN0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogOHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgQWN0aW9uQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiBub25lO1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBhZGRpbmc6IDRweCA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgdHJhbnNpdGlvbjogYWxsICR7dHJhbnNpdGlvbnMubWFpbn07XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtwcm9wcyA9PiAocHJvcHMuZGFuZ2VyID8gY29sb3JzLmVycm9yVGV4dCA6IGNvbG9ycy5hY3RpdmUpfTtcbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICB9XG5gO1xuXG5jb25zdCBSZXNvbHZlZEJhZGdlID0gc3R5bGVkLnNwYW5gXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgY29sb3I6IHdoaXRlO1xuICBmb250LXNpemU6IDEwcHg7XG4gIHBhZGRpbmc6IDJweCA2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jbGFzcyBOb3RlSXRlbSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbm90ZTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVG9nZ2xlUmVzb2x1dGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaXNFZGl0aW5nOiBmYWxzZSxcbiAgICBlZGl0Q29udGVudDogJycsXG4gIH07XG5cbiAgaXNDdXJyZW50VXNlckF1dGhvciA9ICgpID0+IHtcbiAgICBjb25zdCB7IG5vdGUsIHVzZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY3VycmVudFVzZXJOYW1lID0gdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICByZXR1cm4gbm90ZS5nZXQoJ2F1dGhvcicpID09PSBjdXJyZW50VXNlck5hbWU7XG4gIH07XG5cbiAgZ2V0QXV0aG9ySW5pdGlhbHMgPSBhdXRob3IgPT4ge1xuICAgIHJldHVybiBhdXRob3JcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKG5hbWUgPT4gbmFtZS5jaGFyQXQoMCkpXG4gICAgICAuam9pbignJylcbiAgICAgIC5zbGljZSgwLCAyKTtcbiAgfTtcblxuICBmb3JtYXRUaW1lc3RhbXAgPSB0aW1lc3RhbXAgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgZGlmZk1zID0gbm93IC0gZGF0ZTtcbiAgICBjb25zdCBkaWZmTWlucyA9IE1hdGguZmxvb3IoZGlmZk1zIC8gNjAwMDApO1xuICAgIGNvbnN0IGRpZmZIb3VycyA9IE1hdGguZmxvb3IoZGlmZk1zIC8gMzYwMDAwMCk7XG4gICAgY29uc3QgZGlmZkRheXMgPSBNYXRoLmZsb29yKGRpZmZNcyAvIDg2NDAwMDAwKTtcblxuICAgIGlmIChkaWZmTWlucyA8IDEpIHJldHVybiAnanVzdCBub3cnO1xuICAgIGlmIChkaWZmTWlucyA8IDYwKSByZXR1cm4gYCR7ZGlmZk1pbnN9bSBhZ29gO1xuICAgIGlmIChkaWZmSG91cnMgPCAyNCkgcmV0dXJuIGAke2RpZmZIb3Vyc31oIGFnb2A7XG4gICAgaWYgKGRpZmZEYXlzIDwgNykgcmV0dXJuIGAke2RpZmZEYXlzfWQgYWdvYDtcblxuICAgIHJldHVybiBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xuICB9O1xuXG4gIGhhbmRsZUVkaXRTdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogdHJ1ZSxcbiAgICAgIGVkaXRDb250ZW50OiB0aGlzLnByb3BzLm5vdGUuZ2V0KCdjb250ZW50JyksXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdENhbmNlbCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICBlZGl0Q29udGVudDogJycsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdFNhdmUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvblVwZGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGVkaXRDb250ZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHRyaW1tZWRDb250ZW50ID0gZWRpdENvbnRlbnQudHJpbSgpO1xuXG4gICAgaWYgKHRyaW1tZWRDb250ZW50ICYmIHRyaW1tZWRDb250ZW50ICE9PSBub3RlLmdldCgnY29udGVudCcpKSB7XG4gICAgICBvblVwZGF0ZShub3RlLmdldCgnaWQnKSwgeyBjb250ZW50OiB0cmltbWVkQ29udGVudCB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICBlZGl0Q29udGVudDogJycsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdEtleURvd24gPSBlID0+IHtcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUVkaXRTYXZlKCk7XG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGFuZGxlRWRpdENhbmNlbCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVEZWxldGUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAod2luZG93LmNvbmZpcm0odCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5jb25maXJtRGVsZXRlJykpKSB7XG4gICAgICBvbkRlbGV0ZShub3RlLmdldCgnaWQnKSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVJlc29sdXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvblRvZ2dsZVJlc29sdXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgb25Ub2dnbGVSZXNvbHV0aW9uKG5vdGUuZ2V0KCdpZCcpKTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbm90ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzRWRpdGluZywgZWRpdENvbnRlbnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBub3RlLmdldCgncmVzb2x2ZWQnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Tm90ZUNhcmQgcmVzb2x2ZWQ9e3Jlc29sdmVkfT5cbiAgICAgICAgPE5vdGVIZWFkZXI+XG4gICAgICAgICAgPEF1dGhvclNlY3Rpb24+XG4gICAgICAgICAgICA8QXZhdGFyPlxuICAgICAgICAgICAgICB7bm90ZS5nZXQoJ2F2YXRhclVybCcpID8gKFxuICAgICAgICAgICAgICAgIDxBdmF0YXJJbWFnZVxuICAgICAgICAgICAgICAgICAgc3JjPXtub3RlLmdldCgnYXZhdGFyVXJsJyl9XG4gICAgICAgICAgICAgICAgICBhbHQ9e2Ake25vdGUuZ2V0KCdhdXRob3InKX0gYXZhdGFyYH1cbiAgICAgICAgICAgICAgICAgIG9uRXJyb3I9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5uZXh0U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPEF2YXRhckluaXRpYWxzIHN0eWxlPXt7IGRpc3BsYXk6IG5vdGUuZ2V0KCdhdmF0YXJVcmwnKSA/ICdub25lJyA6ICdmbGV4JyB9fT5cbiAgICAgICAgICAgICAgICB7dGhpcy5nZXRBdXRob3JJbml0aWFscyhub3RlLmdldCgnYXV0aG9yJykpfVxuICAgICAgICAgICAgICA8L0F2YXRhckluaXRpYWxzPlxuICAgICAgICAgICAgPC9BdmF0YXI+XG4gICAgICAgICAgICA8Tm90ZUF1dGhvcj57bm90ZS5nZXQoJ2F1dGhvcicpfTwvTm90ZUF1dGhvcj5cbiAgICAgICAgICA8L0F1dGhvclNlY3Rpb24+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBnYXA6ICc4cHgnIH19PlxuICAgICAgICAgICAge3Jlc29sdmVkICYmIDxSZXNvbHZlZEJhZGdlPnJlc29sdmVkPC9SZXNvbHZlZEJhZGdlPn1cbiAgICAgICAgICAgIDxOb3RlVGltZXN0YW1wPnt0aGlzLmZvcm1hdFRpbWVzdGFtcChub3RlLmdldCgndGltZXN0YW1wJykpfTwvTm90ZVRpbWVzdGFtcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ob3RlSGVhZGVyPlxuXG4gICAgICAgIDxOb3RlQ29udGVudD5cbiAgICAgICAgICB7aXNFZGl0aW5nID8gKFxuICAgICAgICAgICAgPEVkaXRhYmxlVGV4dFxuICAgICAgICAgICAgICB2YWx1ZT17ZWRpdENvbnRlbnR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuc2V0U3RhdGUoeyBlZGl0Q29udGVudDogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVFZGl0S2V5RG93bn1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUuZWRpdFBsYWNlaG9sZGVyJyl9XG4gICAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVUZXh0Pntub3RlLmdldCgnY29udGVudCcpfTwvTm90ZVRleHQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Ob3RlQ29udGVudD5cblxuICAgICAgICA8Tm90ZUFjdGlvbnM+XG4gICAgICAgICAge2lzRWRpdGluZyA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVFZGl0U2F2ZX0+XG4gICAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUuc2F2ZScpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZUVkaXRDYW5jZWx9PlxuICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmNhbmNlbCcpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7IXJlc29sdmVkICYmIChcbiAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRWRpdFN0YXJ0fSBkaXNhYmxlZD17IXRoaXMuaXNDdXJyZW50VXNlckF1dGhvcigpfT5cbiAgICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmVkaXQnKX1cbiAgICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlUmVzb2x1dGlvbn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXRoaXMuaXNDdXJyZW50VXNlckF1dGhvcigpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Jlc29sdmVkXG4gICAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUudW5yZXNvbHZlJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5yZXNvbHZlJyl9XG4gICAgICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVEZWxldGV9XG4gICAgICAgICAgICAgICAgZGFuZ2VyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLmlzQ3VycmVudFVzZXJBdXRob3IoKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmRlbGV0ZScpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZUFjdGlvbnM+XG4gICAgICA8L05vdGVDYXJkPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90ZUl0ZW07XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NoteAuthor = /*#__PURE__*/_styled("span", {
  target: "ee0v20j11",
  label: "NoteAuthor"
})("font-size:12px;color:", colors.controlLabel, ";font-weight:500;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AuthorSection = /*#__PURE__*/_styled("div", {
  target: "ee0v20j10",
  label: "AuthorSection"
})(process.env.NODE_ENV === "production" ? {
  name: "1yydxi7",
  styles: "display:flex;align-items:center;gap:8px"
} : {
  name: "1yydxi7",
  styles: "display:flex;align-items:center;gap:8px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Avatar = /*#__PURE__*/_styled("div", {
  target: "ee0v20j9",
  label: "Avatar"
})("width:24px;height:24px;border-radius:50%;overflow:hidden;background-color:", colors.inputBackground, ";display:flex;align-items:center;justify-content:center;flex-shrink:0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AvatarImage = /*#__PURE__*/_styled("img", {
  target: "ee0v20j8",
  label: "AvatarImage"
})(process.env.NODE_ENV === "production" ? {
  name: "4uwt2b",
  styles: "width:100%;height:100%;object-fit:cover"
} : {
  name: "4uwt2b",
  styles: "width:100%;height:100%;object-fit:cover/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AvatarInitials = /*#__PURE__*/_styled("span", {
  target: "ee0v20j7",
  label: "AvatarInitials"
})("font-size:10px;font-weight:600;color:", colors.controlLabel, ";text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvTm90ZUl0ZW0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMERrQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9yTm90ZXNQYW5lL05vdGVJdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29sb3JzLCB0cmFuc2l0aW9ucyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgTm90ZUNhcmQgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzID0+IChwcm9wcy5yZXNvbHZlZCA/IGNvbG9ycy5pbnB1dEJhY2tncm91bmQgOiAnd2hpdGUnKX07XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7cHJvcHMgPT4gKHByb3BzLnJlc29sdmVkID8gY29sb3JzLnRleHRGaWVsZEJvcmRlciA6IGNvbG9ycy50ZXh0RmllbGRCb3JkZXIpfTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gIHBhZGRpbmc6IDEycHg7XG4gIHRyYW5zaXRpb246IGFsbCAke3RyYW5zaXRpb25zLm1haW59O1xuICBvcGFjaXR5OiAke3Byb3BzID0+IChwcm9wcy5yZXNvbHZlZCA/IDAuNyA6IDEpfTtcblxuICAmOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgfVxuYDtcblxuY29uc3QgTm90ZUhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuYDtcblxuY29uc3QgTm90ZUF1dGhvciA9IHN0eWxlZC5zcGFuYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3QgQXV0aG9yU2VjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgQXZhdGFyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDI0cHg7XG4gIGhlaWdodDogMjRweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbnB1dEJhY2tncm91bmR9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleC1zaHJpbms6IDA7XG5gO1xuXG5jb25zdCBBdmF0YXJJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xuYDtcblxuY29uc3QgQXZhdGFySW5pdGlhbHMgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxMHB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IE5vdGVUaW1lc3RhbXAgPSBzdHlsZWQuc3BhbmBcbiAgZm9udC1zaXplOiAxMXB4O1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbmA7XG5cbmNvbnN0IE5vdGVDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xuYDtcblxuY29uc3QgTm90ZVRleHQgPSBzdHlsZWQucGBcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG5gO1xuXG5jb25zdCBFZGl0YWJsZVRleHQgPSBzdHlsZWQudGV4dGFyZWFgXG4gIHdpZHRoOiAxMDAlO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICR7Y29sb3JzLmFjdGl2ZX07XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgb3V0bGluZTogbm9uZTtcblxuICAmOmZvY3VzIHtcbiAgICBib3JkZXItY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHJnYmEoNzAsIDE1MSwgMjE4LCAwLjEpO1xuICB9XG5gO1xuXG5jb25zdCBOb3RlQWN0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogOHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgQWN0aW9uQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiBub25lO1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHBhZGRpbmc6IDRweCA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgdHJhbnNpdGlvbjogYWxsICR7dHJhbnNpdGlvbnMubWFpbn07XG5cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgICBjb2xvcjogJHtwcm9wcyA9PiAocHJvcHMuZGFuZ2VyID8gY29sb3JzLmVycm9yVGV4dCA6IGNvbG9ycy5hY3RpdmUpfTtcbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuNTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICB9XG5gO1xuXG5jb25zdCBSZXNvbHZlZEJhZGdlID0gc3R5bGVkLnNwYW5gXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgY29sb3I6IHdoaXRlO1xuICBmb250LXNpemU6IDEwcHg7XG4gIHBhZGRpbmc6IDJweCA2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jbGFzcyBOb3RlSXRlbSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbm90ZTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIG9uVXBkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVG9nZ2xlUmVzb2x1dGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7XG4gICAgaXNFZGl0aW5nOiBmYWxzZSxcbiAgICBlZGl0Q29udGVudDogJycsXG4gIH07XG5cbiAgaXNDdXJyZW50VXNlckF1dGhvciA9ICgpID0+IHtcbiAgICBjb25zdCB7IG5vdGUsIHVzZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY3VycmVudFVzZXJOYW1lID0gdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJztcbiAgICByZXR1cm4gbm90ZS5nZXQoJ2F1dGhvcicpID09PSBjdXJyZW50VXNlck5hbWU7XG4gIH07XG5cbiAgZ2V0QXV0aG9ySW5pdGlhbHMgPSBhdXRob3IgPT4ge1xuICAgIHJldHVybiBhdXRob3JcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKG5hbWUgPT4gbmFtZS5jaGFyQXQoMCkpXG4gICAgICAuam9pbignJylcbiAgICAgIC5zbGljZSgwLCAyKTtcbiAgfTtcblxuICBmb3JtYXRUaW1lc3RhbXAgPSB0aW1lc3RhbXAgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgZGlmZk1zID0gbm93IC0gZGF0ZTtcbiAgICBjb25zdCBkaWZmTWlucyA9IE1hdGguZmxvb3IoZGlmZk1zIC8gNjAwMDApO1xuICAgIGNvbnN0IGRpZmZIb3VycyA9IE1hdGguZmxvb3IoZGlmZk1zIC8gMzYwMDAwMCk7XG4gICAgY29uc3QgZGlmZkRheXMgPSBNYXRoLmZsb29yKGRpZmZNcyAvIDg2NDAwMDAwKTtcblxuICAgIGlmIChkaWZmTWlucyA8IDEpIHJldHVybiAnanVzdCBub3cnO1xuICAgIGlmIChkaWZmTWlucyA8IDYwKSByZXR1cm4gYCR7ZGlmZk1pbnN9bSBhZ29gO1xuICAgIGlmIChkaWZmSG91cnMgPCAyNCkgcmV0dXJuIGAke2RpZmZIb3Vyc31oIGFnb2A7XG4gICAgaWYgKGRpZmZEYXlzIDwgNykgcmV0dXJuIGAke2RpZmZEYXlzfWQgYWdvYDtcblxuICAgIHJldHVybiBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xuICB9O1xuXG4gIGhhbmRsZUVkaXRTdGFydCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogdHJ1ZSxcbiAgICAgIGVkaXRDb250ZW50OiB0aGlzLnByb3BzLm5vdGUuZ2V0KCdjb250ZW50JyksXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdENhbmNlbCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICBlZGl0Q29udGVudDogJycsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdFNhdmUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvblVwZGF0ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGVkaXRDb250ZW50IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHRyaW1tZWRDb250ZW50ID0gZWRpdENvbnRlbnQudHJpbSgpO1xuXG4gICAgaWYgKHRyaW1tZWRDb250ZW50ICYmIHRyaW1tZWRDb250ZW50ICE9PSBub3RlLmdldCgnY29udGVudCcpKSB7XG4gICAgICBvblVwZGF0ZShub3RlLmdldCgnaWQnKSwgeyBjb250ZW50OiB0cmltbWVkQ29udGVudCB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICBlZGl0Q29udGVudDogJycsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlRWRpdEtleURvd24gPSBlID0+IHtcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUVkaXRTYXZlKCk7XG4gICAgfSBlbHNlIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuaGFuZGxlRWRpdENhbmNlbCgpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVEZWxldGUgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAod2luZG93LmNvbmZpcm0odCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5jb25maXJtRGVsZXRlJykpKSB7XG4gICAgICBvbkRlbGV0ZShub3RlLmdldCgnaWQnKSk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZVJlc29sdXRpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBub3RlLCBvblRvZ2dsZVJlc29sdXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgb25Ub2dnbGVSZXNvbHV0aW9uKG5vdGUuZ2V0KCdpZCcpKTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbm90ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzRWRpdGluZywgZWRpdENvbnRlbnQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBub3RlLmdldCgncmVzb2x2ZWQnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Tm90ZUNhcmQgcmVzb2x2ZWQ9e3Jlc29sdmVkfT5cbiAgICAgICAgPE5vdGVIZWFkZXI+XG4gICAgICAgICAgPEF1dGhvclNlY3Rpb24+XG4gICAgICAgICAgICA8QXZhdGFyPlxuICAgICAgICAgICAgICB7bm90ZS5nZXQoJ2F2YXRhclVybCcpID8gKFxuICAgICAgICAgICAgICAgIDxBdmF0YXJJbWFnZVxuICAgICAgICAgICAgICAgICAgc3JjPXtub3RlLmdldCgnYXZhdGFyVXJsJyl9XG4gICAgICAgICAgICAgICAgICBhbHQ9e2Ake25vdGUuZ2V0KCdhdXRob3InKX0gYXZhdGFyYH1cbiAgICAgICAgICAgICAgICAgIG9uRXJyb3I9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICBlLnRhcmdldC5uZXh0U2libGluZy5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPEF2YXRhckluaXRpYWxzIHN0eWxlPXt7IGRpc3BsYXk6IG5vdGUuZ2V0KCdhdmF0YXJVcmwnKSA/ICdub25lJyA6ICdmbGV4JyB9fT5cbiAgICAgICAgICAgICAgICB7dGhpcy5nZXRBdXRob3JJbml0aWFscyhub3RlLmdldCgnYXV0aG9yJykpfVxuICAgICAgICAgICAgICA8L0F2YXRhckluaXRpYWxzPlxuICAgICAgICAgICAgPC9BdmF0YXI+XG4gICAgICAgICAgICA8Tm90ZUF1dGhvcj57bm90ZS5nZXQoJ2F1dGhvcicpfTwvTm90ZUF1dGhvcj5cbiAgICAgICAgICA8L0F1dGhvclNlY3Rpb24+XG4gICAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInLCBnYXA6ICc4cHgnIH19PlxuICAgICAgICAgICAge3Jlc29sdmVkICYmIDxSZXNvbHZlZEJhZGdlPnJlc29sdmVkPC9SZXNvbHZlZEJhZGdlPn1cbiAgICAgICAgICAgIDxOb3RlVGltZXN0YW1wPnt0aGlzLmZvcm1hdFRpbWVzdGFtcChub3RlLmdldCgndGltZXN0YW1wJykpfTwvTm90ZVRpbWVzdGFtcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ob3RlSGVhZGVyPlxuXG4gICAgICAgIDxOb3RlQ29udGVudD5cbiAgICAgICAgICB7aXNFZGl0aW5nID8gKFxuICAgICAgICAgICAgPEVkaXRhYmxlVGV4dFxuICAgICAgICAgICAgICB2YWx1ZT17ZWRpdENvbnRlbnR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuc2V0U3RhdGUoeyBlZGl0Q29udGVudDogZS50YXJnZXQudmFsdWUgfSl9XG4gICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVFZGl0S2V5RG93bn1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3QoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUuZWRpdFBsYWNlaG9sZGVyJyl9XG4gICAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVUZXh0Pntub3RlLmdldCgnY29udGVudCcpfTwvTm90ZVRleHQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Ob3RlQ29udGVudD5cblxuICAgICAgICA8Tm90ZUFjdGlvbnM+XG4gICAgICAgICAge2lzRWRpdGluZyA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxBY3Rpb25CdXR0b24gb25DbGljaz17dGhpcy5oYW5kbGVFZGl0U2F2ZX0+XG4gICAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUuc2F2ZScpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbiBvbkNsaWNrPXt0aGlzLmhhbmRsZUVkaXRDYW5jZWx9PlxuICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmNhbmNlbCcpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICB7IXJlc29sdmVkICYmIChcbiAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRWRpdFN0YXJ0fSBkaXNhYmxlZD17IXRoaXMuaXNDdXJyZW50VXNlckF1dGhvcigpfT5cbiAgICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmVkaXQnKX1cbiAgICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlUmVzb2x1dGlvbn1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXRoaXMuaXNDdXJyZW50VXNlckF1dGhvcigpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Jlc29sdmVkXG4gICAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUudW5yZXNvbHZlJylcbiAgICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5yZXNvbHZlJyl9XG4gICAgICAgICAgICAgIDwvQWN0aW9uQnV0dG9uPlxuICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVEZWxldGV9XG4gICAgICAgICAgICAgICAgZGFuZ2VyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLmlzQ3VycmVudFVzZXJBdXRob3IoKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmRlbGV0ZScpfVxuICAgICAgICAgICAgICA8L0FjdGlvbkJ1dHRvbj5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZUFjdGlvbnM+XG4gICAgICA8L05vdGVDYXJkPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90ZUl0ZW07XG4iXX0= */"));
const NoteTimestamp = /*#__PURE__*/_styled("span", {
  target: "ee0v20j6",
  label: "NoteTimestamp"
})("font-size:11px;color:", colors.controlLabel, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoteContent = /*#__PURE__*/_styled("div", {
  target: "ee0v20j5",
  label: "NoteContent"
})(process.env.NODE_ENV === "production" ? {
  name: "5bhc30",
  styles: "margin-bottom:8px"
} : {
  name: "5bhc30",
  styles: "margin-bottom:8px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NoteText = /*#__PURE__*/_styled("p", {
  target: "ee0v20j4",
  label: "NoteText"
})("margin:0;font-size:14px;line-height:1.4;color:", colors.text, ";white-space:pre-wrap;word-wrap:break-word;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const EditableText = /*#__PURE__*/_styled("textarea", {
  target: "ee0v20j3",
  label: "EditableText"
})("width:100%;min-height:60px;padding:8px;border:1px solid ", colors.active, ";border-radius:3px;font-size:14px;font-family:inherit;line-height:1.4;resize:vertical;outline:none;&:focus{border-color:", colors.active, ";box-shadow:0 0 0 2px rgba(70, 151, 218, 0.1);}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoteActions = /*#__PURE__*/_styled("div", {
  target: "ee0v20j2",
  label: "NoteActions"
})(process.env.NODE_ENV === "production" ? {
  name: "197tvr9",
  styles: "display:flex;gap:8px;align-items:center"
} : {
  name: "197tvr9",
  styles: "display:flex;gap:8px;align-items:center/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ActionButton = /*#__PURE__*/_styled("button", {
  target: "ee0v20j1",
  label: "ActionButton"
})("background:none;border:none;color:", colors.controlLabel, ";font-size:12px;cursor:pointer;padding:4px 8px;border-radius:3px;transition:all ", transitions.main, ";&:hover{background-color:", colors.inputBackground, ";color:", props => props.danger ? colors.errorText : colors.active, ";}&:disabled{opacity:0.5;cursor:not-allowed;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ResolvedBadge = /*#__PURE__*/_styled("span", {
  target: "ee0v20j0",
  label: "ResolvedBadge"
})("background-color:", colors.successText, ";color:white;font-size:10px;padding:2px 6px;border-radius:10px;font-weight:500;text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
class NoteItem extends Component {
  static propTypes = {
    note: ImmutablePropTypes.map.isRequired,
    onUpdate: PropTypes.func.isRequired,
    onDelete: PropTypes.func.isRequired,
    onToggleResolution: PropTypes.func.isRequired,
    user: PropTypes.object,
    t: PropTypes.func.isRequired
  };
  state = {
    isEditing: false,
    editContent: ''
  };
  isCurrentUserAuthor = () => {
    const {
      note,
      user
    } = this.props;
    const currentUserName = user?.login || user?.name || 'Anonymous';
    return note.get('author') === currentUserName;
  };
  getAuthorInitials = author => {
    return author.split(' ').map(name => name.charAt(0)).join('').slice(0, 2);
  };
  formatTimestamp = timestamp => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);
    if (diffMins < 1) return 'just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    return date.toLocaleDateString();
  };
  handleEditStart = () => {
    this.setState({
      isEditing: true,
      editContent: this.props.note.get('content')
    });
  };
  handleEditCancel = () => {
    this.setState({
      isEditing: false,
      editContent: ''
    });
  };
  handleEditSave = () => {
    const {
      note,
      onUpdate
    } = this.props;
    const {
      editContent
    } = this.state;
    const trimmedContent = editContent.trim();
    if (trimmedContent && trimmedContent !== note.get('content')) {
      onUpdate(note.get('id'), {
        content: trimmedContent
      });
    }
    this.setState({
      isEditing: false,
      editContent: ''
    });
  };
  handleEditKeyDown = e => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      this.handleEditSave();
    } else if (e.key === 'Escape') {
      e.preventDefault();
      this.handleEditCancel();
    }
  };
  handleDelete = () => {
    const {
      note,
      onDelete,
      t
    } = this.props;
    if (window.confirm(t('editor.editorNotesPane.confirmDelete'))) {
      onDelete(note.get('id'));
    }
  };
  handleToggleResolution = () => {
    const {
      note,
      onToggleResolution
    } = this.props;
    onToggleResolution(note.get('id'));
  };
  render() {
    const {
      note,
      t
    } = this.props;
    const {
      isEditing,
      editContent
    } = this.state;
    const resolved = note.get('resolved');
    return ___EmotionJSX(NoteCard, {
      resolved: resolved
    }, ___EmotionJSX(NoteHeader, null, ___EmotionJSX(AuthorSection, null, ___EmotionJSX(Avatar, null, note.get('avatarUrl') ? ___EmotionJSX(AvatarImage, {
      src: note.get('avatarUrl'),
      alt: `${note.get('author')} avatar`,
      onError: e => {
        e.target.style.display = 'none';
        e.target.nextSibling.style.display = 'flex';
      }
    }) : null, ___EmotionJSX(AvatarInitials, {
      style: {
        display: note.get('avatarUrl') ? 'none' : 'flex'
      }
    }, this.getAuthorInitials(note.get('author')))), ___EmotionJSX(NoteAuthor, null, note.get('author'))), ___EmotionJSX("div", {
      style: {
        display: 'flex',
        alignItems: 'center',
        gap: '8px'
      }
    }, resolved && ___EmotionJSX(ResolvedBadge, null, "resolved"), ___EmotionJSX(NoteTimestamp, null, this.formatTimestamp(note.get('timestamp'))))), ___EmotionJSX(NoteContent, null, isEditing ? ___EmotionJSX(EditableText, {
      value: editContent,
      onChange: e => this.setState({
        editContent: e.target.value
      }),
      onKeyDown: this.handleEditKeyDown,
      placeholder: t('editor.editorNotesPane.editPlaceholder'),
      autoFocus: true
    }) : ___EmotionJSX(NoteText, null, note.get('content'))), ___EmotionJSX(NoteActions, null, isEditing ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(ActionButton, {
      onClick: this.handleEditSave
    }, t('editor.editorNotesPane.save')), ___EmotionJSX(ActionButton, {
      onClick: this.handleEditCancel
    }, t('editor.editorNotesPane.cancel'))) : ___EmotionJSX(React.Fragment, null, !resolved && ___EmotionJSX(ActionButton, {
      onClick: this.handleEditStart,
      disabled: !this.isCurrentUserAuthor()
    }, t('editor.editorNotesPane.edit')), ___EmotionJSX(ActionButton, {
      onClick: this.handleToggleResolution,
      disabled: !this.isCurrentUserAuthor()
    }, resolved ? t('editor.editorNotesPane.unresolve') : t('editor.editorNotesPane.resolve')), ___EmotionJSX(ActionButton, {
      onClick: this.handleDelete,
      danger: true,
      disabled: !this.isCurrentUserAuthor()
    }, t('editor.editorNotesPane.delete')))));
  }
}
export default NoteItem;