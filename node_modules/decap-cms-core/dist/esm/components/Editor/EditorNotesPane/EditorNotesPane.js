import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { List } from 'immutable';
import { colors } from 'decap-cms-ui-default';
import NotesList from './NotesList';
import AddNoteForm from './AddNoteForm';
import { jsx as ___EmotionJSX } from "@emotion/react";
const NotesContainer = /*#__PURE__*/_styled("div", {
  target: "e1fzfvs07",
  label: "NotesContainer"
})("height:100%;display:flex;flex-direction:column;background-color:", colors.background, ";border-left:1px solid ", colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9yTm90ZXNQYW5lL0VkaXRvck5vdGVzUGFuZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgY29sb3JzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgTm90ZXNMaXN0IGZyb20gJy4vTm90ZXNMaXN0JztcbmltcG9ydCBBZGROb3RlRm9ybSBmcm9tICcuL0FkZE5vdGVGb3JtJztcblxuY29uc3QgTm90ZXNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmJhY2tncm91bmR9O1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG5gO1xuXG5jb25zdCBOb3Rlc0hlYWRlciA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDE2cHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5pbnB1dEJhY2tncm91bmR9O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi1oZWlnaHQ6IDYwcHg7XG5gO1xuXG5jb25zdCBOb3Rlc1RpdGxlID0gc3R5bGVkLmgzYFxuICBtYXJnaW46IDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgTm90ZXNDb3VudCA9IHN0eWxlZC5zcGFuYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIHBhZGRpbmc6IDJweCA4cHg7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbmA7XG5cbmNvbnN0IE5vdGVzQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlID0gc3R5bGVkLmRpdmBcbiAgZmxleDogMTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDQwcHggMjBweDtcbiAgY29sb3I6ICR7Y29sb3JzLmNvbnRyb2xMYWJlbH07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbmA7XG5cbmNvbnN0IEVtcHR5U3RhdGVJY29uID0gc3R5bGVkLmRpdmBcbiAgZm9udC1zaXplOiA0OHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICBvcGFjaXR5OiAwLjU7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlVGV4dCA9IHN0eWxlZC5wYFxuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbjogMDtcbiAgbGluZS1oZWlnaHQ6IDEuNDtcbmA7XG5cbmNsYXNzIEVkaXRvck5vdGVzUGFuZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbm90ZXM6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBub3RlczogTGlzdCgpLFxuICAgIHQ6IGtleSA9PiBrZXksIC8vIEZhbGxiYWNrIHRyYW5zbGF0aW9uIGZ1bmN0aW9uXG4gIH07XG5cbiAgaGFuZGxlQWRkTm90ZSA9IGNvbnRlbnQgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UsIHVzZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgbmV3Tm90ZSA9IHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudHJpbSgpLFxuICAgICAgYXV0aG9yOiB1c2VyPy5sb2dpbiB8fCB1c2VyPy5uYW1lIHx8ICdBbm9ueW1vdXMnLFxuICAgICAgcmVzb2x2ZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICBvbkNoYW5nZSgnQUREX05PVEUnLCBuZXdOb3RlKTtcbiAgfTtcblxuICBoYW5kbGVVcGRhdGVOb3RlID0gKG5vdGVJZCwgdXBkYXRlcykgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgb25DaGFuZ2UoJ1VQREFURV9OT1RFJywgeyBpZDogbm90ZUlkLCB1cGRhdGVzIH0pO1xuICB9O1xuXG4gIGhhbmRsZURlbGV0ZU5vdGUgPSBub3RlSWQgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgb25DaGFuZ2UoJ0RFTEVURV9OT1RFJywgeyBpZDogbm90ZUlkIH0pO1xuICB9O1xuXG4gIGhhbmRsZVRvZ2dsZU5vdGVSZXNvbHV0aW9uID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG5vdGVzIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5vdGVzTGlzdCA9IG5vdGVzICYmIG5vdGVzLnNpemUgIT09IHVuZGVmaW5lZCA/IG5vdGVzIDogTGlzdChub3RlcyB8fCBbXSk7XG4gICAgY29uc3Qgbm90ZSA9IG5vdGVzTGlzdC5maW5kKG4gPT4gbi5nZXQoJ2lkJykgPT09IG5vdGVJZCk7XG4gICAgY29uc3QgY3VycmVudFJlc29sdmVkID0gbm90ZSA/IG5vdGUuZ2V0KCdyZXNvbHZlZCcpIDogZmFsc2U7XG5cbiAgICB0aGlzLmhhbmRsZVVwZGF0ZU5vdGUobm90ZUlkLCB7IHJlc29sdmVkOiAhY3VycmVudFJlc29sdmVkIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG5vdGVzLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5vdGVzTGlzdCA9IG5vdGVzICYmIG5vdGVzLnNpemUgIT09IHVuZGVmaW5lZCA/IG5vdGVzIDogTGlzdChub3RlcyB8fCBbXSk7XG4gICAgY29uc3Qgbm90ZXNDb3VudCA9IG5vdGVzTGlzdC5zaXplO1xuICAgIGNvbnN0IHVucmVzb2x2ZWRDb3VudCA9IG5vdGVzTGlzdC5maWx0ZXIobm90ZSA9PiAhbm90ZS5nZXQoJ3Jlc29sdmVkJykpLnNpemU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE5vdGVzQ29udGFpbmVyPlxuICAgICAgICA8Tm90ZXNIZWFkZXI+XG4gICAgICAgICAgPE5vdGVzVGl0bGU+e3QoJ2VkaXRvci5lZGl0b3JOb3Rlc1BhbmUudGl0bGUnKX08L05vdGVzVGl0bGU+XG4gICAgICAgICAge25vdGVzQ291bnQgPiAwICYmIChcbiAgICAgICAgICAgIDxOb3Rlc0NvdW50Pnt1bnJlc29sdmVkQ291bnQgPiAwID8gdW5yZXNvbHZlZENvdW50IDogbm90ZXNDb3VudH08L05vdGVzQ291bnQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9Ob3Rlc0hlYWRlcj5cblxuICAgICAgICA8Tm90ZXNDb250ZW50PlxuICAgICAgICAgIHtub3Rlc0NvdW50ID09PSAwID8gKFxuICAgICAgICAgICAgPEVtcHR5U3RhdGU+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlSWNvbj7wn5OdPC9FbXB0eVN0YXRlSWNvbj5cbiAgICAgICAgICAgICAgPEVtcHR5U3RhdGVUZXh0Pnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLmVtcHR5U3RhdGUnKX08L0VtcHR5U3RhdGVUZXh0PlxuICAgICAgICAgICAgPC9FbXB0eVN0YXRlPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8Tm90ZXNMaXN0XG4gICAgICAgICAgICAgIG5vdGVzPXtub3Rlc0xpc3R9XG4gICAgICAgICAgICAgIG9uVXBkYXRlPXt0aGlzLmhhbmRsZVVwZGF0ZU5vdGV9XG4gICAgICAgICAgICAgIG9uRGVsZXRlPXt0aGlzLmhhbmRsZURlbGV0ZU5vdGV9XG4gICAgICAgICAgICAgIG9uVG9nZ2xlUmVzb2x1dGlvbj17dGhpcy5oYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbn1cbiAgICAgICAgICAgICAgdXNlcj17dGhpcy5wcm9wcy51c2VyfVxuICAgICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuXG4gICAgICAgICAgPEFkZE5vdGVGb3JtIG9uQWRkPXt0aGlzLmhhbmRsZUFkZE5vdGV9IHQ9e3R9IC8+XG4gICAgICAgIDwvTm90ZXNDb250ZW50PlxuICAgICAgPC9Ob3Rlc0NvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVkaXRvck5vdGVzUGFuZTtcbiJdfQ== */"));
const NotesHeader = /*#__PURE__*/_styled("div", {
  target: "e1fzfvs06",
  label: "NotesHeader"
})("padding:16px;border-bottom:1px solid ", colors.textFieldBorder, ";background-color:", colors.inputBackground, ";display:flex;justify-content:space-between;align-items:center;min-height:60px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */"));
const NotesTitle = /*#__PURE__*/_styled("h3", {
  target: "e1fzfvs05",
  label: "NotesTitle"
})("margin:0;font-size:16px;font-weight:600;color:", colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCNEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */"));
const NotesCount = /*#__PURE__*/_styled("span", {
  target: "e1fzfvs04",
  label: "NotesCount"
})("background-color:", colors.controlLabel, ";color:white;border-radius:12px;padding:2px 8px;font-size:12px;font-weight:500;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1DOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */"));
const NotesContent = /*#__PURE__*/_styled("div", {
  target: "e1fzfvs03",
  label: "NotesContent"
})(process.env.NODE_ENV === "production" ? {
  name: "xt6tct",
  styles: "flex:1;display:flex;flex-direction:column;overflow:hidden"
} : {
  name: "xt6tct",
  styles: "flex:1;display:flex;flex-direction:column;overflow:hidden/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDK0IiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const EmptyState = /*#__PURE__*/_styled("div", {
  target: "e1fzfvs02",
  label: "EmptyState"
})("flex:1;display:flex;flex-direction:column;justify-content:center;align-items:center;padding:40px 20px;color:", colors.controlLabel, ";text-align:center;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1ENkIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */"));
const EmptyStateIcon = /*#__PURE__*/_styled("div", {
  target: "e1fzfvs01",
  label: "EmptyStateIcon"
})(process.env.NODE_ENV === "production" ? {
  name: "wv8os8",
  styles: "font-size:48px;margin-bottom:16px;opacity:0.5"
} : {
  name: "wv8os8",
  styles: "font-size:48px;margin-bottom:16px;opacity:0.5/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThEaUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const EmptyStateText = /*#__PURE__*/_styled("p", {
  target: "e1fzfvs00",
  label: "EmptyStateText"
})(process.env.NODE_ENV === "production" ? {
  name: "ggbbmu",
  styles: "font-size:14px;margin:0;line-height:1.4"
} : {
  name: "ggbbmu",
  styles: "font-size:14px;margin:0;line-height:1.4/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JOb3Rlc1BhbmUvRWRpdG9yTm90ZXNQYW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9FK0IiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvck5vdGVzUGFuZS9FZGl0b3JOb3Rlc1BhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IE5vdGVzTGlzdCBmcm9tICcuL05vdGVzTGlzdCc7XG5pbXBvcnQgQWRkTm90ZUZvcm0gZnJvbSAnLi9BZGROb3RlRm9ybSc7XG5cbmNvbnN0IE5vdGVzQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTm90ZXNIZWFkZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4O1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuaW5wdXRCYWNrZ3JvdW5kfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuYDtcblxuY29uc3QgTm90ZXNUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbmA7XG5cbmNvbnN0IE5vdGVzQ291bnQgPSBzdHlsZWQuc3BhbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBmb250LXNpemU6IDEycHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG5gO1xuXG5jb25zdCBOb3Rlc0NvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXg6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA0MHB4IDIwcHg7XG4gIGNvbG9yOiAke2NvbG9ycy5jb250cm9sTGFiZWx9O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBFbXB0eVN0YXRlSWNvbiA9IHN0eWxlZC5kaXZgXG4gIGZvbnQtc2l6ZTogNDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3BhY2l0eTogMC41O1xuYDtcblxuY29uc3QgRW1wdHlTdGF0ZVRleHQgPSBzdHlsZWQucGBcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjQ7XG5gO1xuXG5jbGFzcyBFZGl0b3JOb3Rlc1BhbmUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG5vdGVzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbm90ZXM6IExpc3QoKSxcbiAgICB0OiBrZXkgPT4ga2V5LCAvLyBGYWxsYmFjayB0cmFuc2xhdGlvbiBmdW5jdGlvblxuICB9O1xuXG4gIGhhbmRsZUFkZE5vdGUgPSBjb250ZW50ID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld05vdGUgPSB7XG4gICAgICBjb250ZW50OiBjb250ZW50LnRyaW0oKSxcbiAgICAgIGF1dGhvcjogdXNlcj8ubG9naW4gfHwgdXNlcj8ubmFtZSB8fCAnQW5vbnltb3VzJyxcbiAgICAgIHJlc29sdmVkOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgb25DaGFuZ2UoJ0FERF9OT1RFJywgbmV3Tm90ZSk7XG4gIH07XG5cbiAgaGFuZGxlVXBkYXRlTm90ZSA9IChub3RlSWQsIHVwZGF0ZXMpID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdVUERBVEVfTk9URScsIHsgaWQ6IG5vdGVJZCwgdXBkYXRlcyB9KTtcbiAgfTtcblxuICBoYW5kbGVEZWxldGVOb3RlID0gbm90ZUlkID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIG9uQ2hhbmdlKCdERUxFVEVfTk9URScsIHsgaWQ6IG5vdGVJZCB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVOb3RlUmVzb2x1dGlvbiA9IG5vdGVJZCA9PiB7XG4gICAgY29uc3QgeyBub3RlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGUgPSBub3Rlc0xpc3QuZmluZChuID0+IG4uZ2V0KCdpZCcpID09PSBub3RlSWQpO1xuICAgIGNvbnN0IGN1cnJlbnRSZXNvbHZlZCA9IG5vdGUgPyBub3RlLmdldCgncmVzb2x2ZWQnKSA6IGZhbHNlO1xuXG4gICAgdGhpcy5oYW5kbGVVcGRhdGVOb3RlKG5vdGVJZCwgeyByZXNvbHZlZDogIWN1cnJlbnRSZXNvbHZlZCB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBub3RlcywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBub3Rlc0xpc3QgPSBub3RlcyAmJiBub3Rlcy5zaXplICE9PSB1bmRlZmluZWQgPyBub3RlcyA6IExpc3Qobm90ZXMgfHwgW10pO1xuICAgIGNvbnN0IG5vdGVzQ291bnQgPSBub3Rlc0xpc3Quc2l6ZTtcbiAgICBjb25zdCB1bnJlc29sdmVkQ291bnQgPSBub3Rlc0xpc3QuZmlsdGVyKG5vdGUgPT4gIW5vdGUuZ2V0KCdyZXNvbHZlZCcpKS5zaXplO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOb3Rlc0NvbnRhaW5lcj5cbiAgICAgICAgPE5vdGVzSGVhZGVyPlxuICAgICAgICAgIDxOb3Rlc1RpdGxlPnt0KCdlZGl0b3IuZWRpdG9yTm90ZXNQYW5lLnRpdGxlJyl9PC9Ob3Rlc1RpdGxlPlxuICAgICAgICAgIHtub3Rlc0NvdW50ID4gMCAmJiAoXG4gICAgICAgICAgICA8Tm90ZXNDb3VudD57dW5yZXNvbHZlZENvdW50ID4gMCA/IHVucmVzb2x2ZWRDb3VudCA6IG5vdGVzQ291bnR9PC9Ob3Rlc0NvdW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTm90ZXNIZWFkZXI+XG5cbiAgICAgICAgPE5vdGVzQ29udGVudD5cbiAgICAgICAgICB7bm90ZXNDb3VudCA9PT0gMCA/IChcbiAgICAgICAgICAgIDxFbXB0eVN0YXRlPlxuICAgICAgICAgICAgICA8RW1wdHlTdGF0ZUljb24+8J+TnTwvRW1wdHlTdGF0ZUljb24+XG4gICAgICAgICAgICAgIDxFbXB0eVN0YXRlVGV4dD57dCgnZWRpdG9yLmVkaXRvck5vdGVzUGFuZS5lbXB0eVN0YXRlJyl9PC9FbXB0eVN0YXRlVGV4dD5cbiAgICAgICAgICAgIDwvRW1wdHlTdGF0ZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPE5vdGVzTGlzdFxuICAgICAgICAgICAgICBub3Rlcz17bm90ZXNMaXN0fVxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGhpcy5oYW5kbGVVcGRhdGVOb3RlfVxuICAgICAgICAgICAgICBvbkRlbGV0ZT17dGhpcy5oYW5kbGVEZWxldGVOb3RlfVxuICAgICAgICAgICAgICBvblRvZ2dsZVJlc29sdXRpb249e3RoaXMuaGFuZGxlVG9nZ2xlTm90ZVJlc29sdXRpb259XG4gICAgICAgICAgICAgIHVzZXI9e3RoaXMucHJvcHMudXNlcn1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIDxBZGROb3RlRm9ybSBvbkFkZD17dGhpcy5oYW5kbGVBZGROb3RlfSB0PXt0fSAvPlxuICAgICAgICA8L05vdGVzQ29udGVudD5cbiAgICAgIDwvTm90ZXNDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JOb3Rlc1BhbmU7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
class EditorNotesPane extends Component {
  static propTypes = {
    notes: ImmutablePropTypes.list,
    onChange: PropTypes.func.isRequired,
    entry: ImmutablePropTypes.map.isRequired,
    collection: ImmutablePropTypes.map.isRequired,
    user: PropTypes.object,
    t: PropTypes.func
  };
  static defaultProps = {
    notes: List(),
    t: key => key // Fallback translation function
  };
  handleAddNote = content => {
    const {
      onChange,
      user
    } = this.props;
    const newNote = {
      content: content.trim(),
      author: user?.login || user?.name || 'Anonymous',
      resolved: false
    };
    onChange('ADD_NOTE', newNote);
  };
  handleUpdateNote = (noteId, updates) => {
    const {
      onChange
    } = this.props;
    onChange('UPDATE_NOTE', {
      id: noteId,
      updates
    });
  };
  handleDeleteNote = noteId => {
    const {
      onChange
    } = this.props;
    onChange('DELETE_NOTE', {
      id: noteId
    });
  };
  handleToggleNoteResolution = noteId => {
    const {
      notes
    } = this.props;
    const notesList = notes && notes.size !== undefined ? notes : List(notes || []);
    const note = notesList.find(n => n.get('id') === noteId);
    const currentResolved = note ? note.get('resolved') : false;
    this.handleUpdateNote(noteId, {
      resolved: !currentResolved
    });
  };
  render() {
    const {
      notes,
      t
    } = this.props;
    const notesList = notes && notes.size !== undefined ? notes : List(notes || []);
    const notesCount = notesList.size;
    const unresolvedCount = notesList.filter(note => !note.get('resolved')).size;
    return ___EmotionJSX(NotesContainer, null, ___EmotionJSX(NotesHeader, null, ___EmotionJSX(NotesTitle, null, t('editor.editorNotesPane.title')), notesCount > 0 && ___EmotionJSX(NotesCount, null, unresolvedCount > 0 ? unresolvedCount : notesCount)), ___EmotionJSX(NotesContent, null, notesCount === 0 ? ___EmotionJSX(EmptyState, null, ___EmotionJSX(EmptyStateIcon, null, "\uD83D\uDCDD"), ___EmotionJSX(EmptyStateText, null, t('editor.editorNotesPane.emptyState'))) : ___EmotionJSX(NotesList, {
      notes: notesList,
      onUpdate: this.handleUpdateNote,
      onDelete: this.handleDeleteNote,
      onToggleResolution: this.handleToggleNoteResolution,
      user: this.props.user,
      t: t
    }), ___EmotionJSX(AddNoteForm, {
      onAdd: this.handleAddNote,
      t: t
    })));
  }
}
export default EditorNotesPane;